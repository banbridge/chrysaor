// This file is @generated by prost-build.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "PascalCase")]
#[derive(::prost_validate::Validator)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListUserReq {
    #[prost(string, optional, tag = "1")]
    #[validate(name = "admin_v1.ListUserReq.Username")]
    pub username: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    #[validate(name = "admin_v1.ListUserReq.UserID")]
    pub user_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "3")]
    #[validate(name = "admin_v1.ListUserReq.Page")]
    pub page: ::core::option::Option<super::base::PageReq>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "PascalCase")]
#[derive(::prost_validate::Validator)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoginReq {
    #[prost(string, optional, tag = "1")]
    #[validate(name = "admin_v1.LoginReq.Username")]
    pub username: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    #[validate(name = "admin_v1.LoginReq.UserID")]
    pub user_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "3")]
    #[validate(name = "admin_v1.LoginReq.Password")]
    #[validate(r#type(string(min_len = 5, max_len = 20)))]
    pub password: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "PascalCase")]
#[derive(::prost_validate::Validator)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct User {
    #[prost(string, tag = "1")]
    #[validate(name = "admin_v1.User.Username")]
    pub username: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "admin_v1.User.UserID")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    #[validate(name = "admin_v1.User.Age")]
    pub age: i32,
    #[prost(string, tag = "4")]
    #[validate(name = "admin_v1.User.Email")]
    pub email: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    #[validate(name = "admin_v1.User.Phone")]
    pub phone: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "PascalCase")]
#[derive(::prost_validate::Validator)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListUserResult {
    #[prost(message, repeated, tag = "1")]
    #[validate(name = "admin_v1.ListUserResult.Users")]
    pub users: ::prost::alloc::vec::Vec<User>,
    #[prost(int64, tag = "99")]
    #[validate(name = "admin_v1.ListUserResult.Total")]
    pub total: i64,
    #[prost(int64, tag = "100")]
    #[validate(name = "admin_v1.ListUserResult.PageNum")]
    pub page_num: i64,
    #[prost(int64, tag = "101")]
    #[validate(name = "admin_v1.ListUserResult.PageSize")]
    pub page_size: i64,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "PascalCase")]
#[derive(::prost_validate::Validator)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListUserResp {
    #[prost(message, optional, tag = "1")]
    #[validate(name = "admin_v1.ListUserResp.ResponseMetadata")]
    pub response_metadata: ::core::option::Option<super::base::ResponseMetadata>,
    #[prost(message, optional, tag = "2")]
    #[validate(name = "admin_v1.ListUserResp.Result")]
    pub result: ::core::option::Option<ListUserResult>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "PascalCase")]
#[derive(::prost_validate::Validator)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoginResult {
    #[prost(string, tag = "1")]
    #[validate(name = "admin_v1.LoginResult.Token")]
    pub token: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "PascalCase")]
#[derive(::prost_validate::Validator)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoginResp {
    #[prost(message, optional, tag = "1")]
    #[validate(name = "admin_v1.LoginResp.ResponseMetadata")]
    pub response_metadata: ::core::option::Option<super::base::ResponseMetadata>,
    #[prost(message, optional, tag = "2")]
    #[validate(name = "admin_v1.LoginResp.Result")]
    pub result: ::core::option::Option<LoginResult>,
}
