// This file is @generated by prost-build.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "PascalCase")]
#[derive(::prost_validate::Validator)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Base {
    #[prost(string, tag = "1")]
    #[validate(name = "base.Base.LogID")]
    pub log_id: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "100")]
    #[validate(name = "base.Base.Extra")]
    pub extra: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "PascalCase")]
#[derive(::prost_validate::Validator)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Error {
    #[prost(int32, tag = "1")]
    #[validate(name = "base.Error.CodeN")]
    pub code_n: i32,
    #[prost(string, tag = "2")]
    #[validate(name = "base.Error.Code")]
    pub code: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    #[validate(name = "base.Error.Message")]
    pub message: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    #[validate(name = "base.Error.StatusCode")]
    pub status_code: i32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "PascalCase")]
#[derive(::prost_validate::Validator)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResponseMetadata {
    #[prost(string, tag = "1")]
    #[validate(name = "base.ResponseMetadata.RequestID")]
    pub request_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "100")]
    #[validate(name = "base.ResponseMetadata.Error")]
    pub error: ::core::option::Option<Error>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "PascalCase")]
#[derive(::prost_validate::Validator)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PageReq {
    #[prost(int64, tag = "1")]
    #[validate(name = "base.PageReq.PageNum")]
    #[validate(r#type(int64(gt = 0)))]
    pub page_num: i64,
    #[prost(int64, tag = "2")]
    #[validate(name = "base.PageReq.PageSize")]
    #[validate(r#type(int64(lte = 200, gt = 0)))]
    pub page_size: i64,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "PascalCase")]
#[derive(::prost_validate::Validator)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PageResp {
    #[prost(int64, tag = "1")]
    #[validate(name = "base.PageResp.PageNum")]
    pub page_num: i64,
    #[prost(int64, tag = "2")]
    #[validate(name = "base.PageResp.PageSize")]
    pub page_size: i64,
    #[prost(int64, tag = "3")]
    #[validate(name = "base.PageResp.Total")]
    pub total: i64,
}
